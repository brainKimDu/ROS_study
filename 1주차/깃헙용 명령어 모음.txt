$ git
usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.


----------------------------------------------------
리눅스 명령어 

pwd 
-> 현재 위치 경로를 표시하세요

ls 
-> 파일이나 디렉토리를 표시하세요

ls -la
-> l : 디렉터리 상세정보를 표시하세요
-> a : 숨김파일을 나타내세요 
-> r : 파일의 정렬 순서를 거꾸로 표시하세요
-> t : 파일 작성 시간 순으로 표시하세요

cd ..
-> 상위 디렉터리 이동

cd 폴터이름
-> 해당 폴더로 이동

cd ~
-> 홈 디렉터리로 갑시다

mkdir 
-> 현재 디렉터리 안에 하위 디렉터리를 만드세요

rm 폴더
-> 삭제

rm -r 폴더
-> 다날려

vim 이름.txt
-> txt 파일을 만들기
-> esc로 탈출
-> I , A 로 입력모드

vim 모드 
:w 
-> 저장
:q 
-> 종료
:wq 파일이름
-> 문서를 저장 종료
:q!
-> 저장하지말고 종료해

git config --global core.editor "notepad++"
-> 노트패드 편집기로 바꿔줘

cat test.txt
-> txt파일 확인하기

cat 파일1, 파일2, > 새파일 
-> 파일 1,2를 연결해 새파일을 만들어요

cat 파일1 >> 파일22
-> 파일1의 내용을 파일 2 끝에 연결해요

clear 
-> 터미널창의 내용을 지웁니다

exit
-> 터미널 창 종료


git init
-> 초기화하고, 깃을 사용합니다.



작업트리에서 문서를 수정 수정한 파일 중 버전으로 만들고 싶은 것을 스테이징 영역, 즉 스테이지에 저장. 그리고 스테이지에 있던 파일을 저장소로 커밋하는 것이 버전을 만드는 순서



git status 
-> 깃의 상태를 나타낸다.

on branch main -> 현재 master 브랜치에 와있습니다.

no commits yet -> 아직 커밋한 파일이 없습니다

nothing to commit -> 현재 커밋할 파일이 없습니다.

untracked files -> 한번도 버전을 관리하지 않은 파일



git add 파일
-> git status해보면 new file로 나온다. (경고는 줄바꿈문자때문)


git commit -m "message1"
- 버전으로 만든다. -> 커밋한다

git log
-> 버전이 잘 만들어졌는지 확인 (너무 많으면 Q로 빠져나온다)

git diff
-> 작업 트리에 있는 파일과 스테이지에 있는 파일을 비교하거나, 검토할 수 있음

git log --stat
-> 변경사항도 같이 표시해줘


스테이징 : untracked -> unmodified -> modified -> staged
파일수정 :				     <-
스테이징 :  					              ->
커밋	   :			             <-	      <-

git commit --amend 
-> 최근의 커밋을 수정하기 

git checkout -- 파일
-> 작업 트리에서 수정한 파일 되돌리기

git reset HEAD 파일
-> 스테이지에서 내리기 (add전으로 내리기)

git reset HEAD^
-> 커밋이 취소되고 스테이지에서도 내려졌다.

git reset -- hard 복사한 커밋해시
-> 지정된 커밋으로 돌아간다 (지정된  숫자가 커밋된 직후로)
(이후 커밋은 삭제된다)

git revert 해시
-> 돌아간다 


브렌치 
-> 고객사마다 서로다른 요구를 한다. 그걸 관리하기 위한 도구
(마스터에서 분기가 나오는 과정) 

git branch 

git branch 이름

이름
*main

-> 아직 main에서 일하고 있다.


git checkout 이름
-> 갈아탐


git log --oneline --branches --graph
-> 한줄만 , 브랜치 찾아줘, 그래프(상속관계)

git log main..apple
- 차이점을 알려주는 것


git merge 이름 --no-edit



git merge --abort 
-> 병합취소해


만약 충돌이 생긴다면 직접 열어서 수정해야함

git branch -d 이름
-> 브랜치 삭제

git reset 해쉬


git stash
-> 감추기 

git stash pop 
-> 감추기 해제





깃허브로 무엇을 할 수 있나요?
-> 원격 저장소에서 깃을 사용할 수 있습니다.

-> 지역 저장소와 백업을 할 수 있습니다

-> 협업 프로젝트를 할 수 있습니다.

-> 자신의 개발 이력을 남길 수 있습니다



원격 저장소에 연결하기 
git remote add origin 복사한 주소 붙여넣기


git remote -v
-> 연결상태 확인


git push -u origin main
- 연결하기 -> 로그인창이 나온다


커밋 후 -> git push



git pull origin main -> 내려받기




(ssh 로 원격접속하기)
ssh-keygen

cd ~/.ssh
-> ssh 로 가요


cat id_rsa.pub
-> 나오는 정보 카피


git remote add origin ssh주소


git fetch
-> 원격저장소 내용 가져오기


git checkout FETCH_HEAD
-> 패치의 최신 커밋을 보고싶다.


git clone 원격저장소 주소
-> 팀원이 파일을 내려받음


원격저장소의 최신 커밋정보를 가져온 다음 지역 저장소의 커밋을 올려야한다.

git checkout -b f
-> f 브랜치가 없으면 만들고 f로 채크아웃합니다



jekyll 검색해서 개인블로그를 운영할 수 있다























